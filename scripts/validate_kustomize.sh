#!/bin/bash
# Source: https://github.com/redhat-cop/gitops-catalog/blob/main/scripts/validate_kustomize.sh
# shellcheck disable=SC2034,SC2044

display_help(){
  echo "./$(basename "$0") [ -d | --directory DIRECTORY ] [ -e | --enforce-all-schemas ] [ -h | --help ] [ -sl | --schema-location ]
Script to validate the manifests generated by Kustomize
Where:
  -d  | --directory DIRECTORY  Base directory containing Kustomize overlays
  -e  | --enforce-all-schemas  Enable enforcement of all schemas
  -h  | --help                 Display this help text
  -sl | --schema-location      Location containing schemas"
}

which kustomize > /dev/null && KUSTOMIZE_CMD="kustomize build" || echo "Kustomize not in path; using 'oc kustomize' instead"
which helm > /dev/null && GOT_HELM="--enable-helm" || echo "Helm not in path; skipping kustomizations that use helm"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
KUSTOMIZE_CMD="${KUSTOMIZE_CMD:-oc kustomize}"
IGNORE_MISSING_SCHEMAS="--ignore-missing-schemas"
SCHEMA_LOCATION="./openshift-json-schema"
KUSTOMIZE_DIRS="."

init(){
  for i in "${@}"; do
    case $i in
      -d | --directory )
        shift
        KUSTOMIZE_DIRS="${1}"
        shift
        ;;
      -e | --enforce-all-schemas )
        IGNORE_MISSING_SCHEMAS=""
        shift
        ;;
      -sl | --schema-location )
        shift
        SCHEMA_LOCATION="${1}"
        shift
        ;;
      -h | --help )
        display_help
        exit 0
        ;;
      -*) echo >&2 "Invalid option: " "${@}"
          exit 1
          ;;
    esac
  done
}

preprocess_with_envsubst() {
  local path="$1"
  echo "[INFO] Running envsubst on YAML files under $path to resolve environment variables (like \${namespace})"

  find "$path" -type f \( -name "*.yaml" -o -name "*.yml" \) | while read -r file; do
    if grep -q '\${' "$file"; then
      echo "[INFO] Substituting variables in $file"
      envsubst < "$file" > "${file}.resolved"
      if [ -s "${file}.resolved" ]; then
        mv "${file}.resolved" "$file"
      else
        echo "[WARN] Skipping overwrite of $file because resolved content is empty!"
        rm -f "${file}.resolved"
      fi
    fi
  done
}


kustomization_auto_fix(){
  BUILD_PATH=${1}
  [ "${KUSTOMIZE_CMD}" == "kustomize build" ] || return
  FIX_CMD="${FIX_CMD:-kustomize edit fix}"
  pushd "${BUILD_PATH}" || return
  ${FIX_CMD}
  popd || return
}


kustomization_build(){
  BUILD=${1}

  echo "Running: ${KUSTOMIZE_CMD} \"${BUILD}\""

  
  if ! ${KUSTOMIZE_CMD} "${BUILD}" > /dev/null 2>&1; then
    return 0
  fi

  
  KUSTOMIZE_BUILD_OUTPUT=$(${KUSTOMIZE_CMD} "${BUILD}")

  echo "Validating output with kubeconform..."
  echo "$KUSTOMIZE_BUILD_OUTPUT" | kubeconform \
    -strict \
    -schema-location="file://${SCHEMA_LOCATION}" \
    -skip CustomResourceDefinition,HelmRelease \
    -output json > /dev/null 2>&1

  return 0
}


kustomization_process(){
  echo "Validating Kustomize directories in: ${KUSTOMIZE_DIRS}"
  preprocess_with_envsubst "${KUSTOMIZE_DIRS}"

  find "${KUSTOMIZE_DIRS}" -type f -name "kustomization.yaml" -print0 | while IFS= read -r -d $'\0' kustomization_file; do
      LINT=$(dirname "${kustomization_file}")
      echo "--- Processing: ${LINT} ---"
      kustomization_build "${LINT}"
  done

  echo "---"
  echo "Kustomize check finished."
}

# Main
init "${@}"
kustomization_process
